import React from "react";
import { Provider } from "react-redux";
import store from "./Redux/store";
import Counter from "./Counter";
import Userid from "./Userid";
import UsersList from "./UsersList";

function App() {
  return (
    <Provider store={store}>
      <Counter />
      <Userid/>
      <UsersList/>
    </Provider>
  );
}

export default App;

/* ----------------------  UserList  -------------------*/
import React, { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { fetchUsers } from './Redux/middleware/usersAction';

function UsersList() {
    const dispatch=useDispatch();
    const { loading, users, error }  =useSelector((state)=>state.users)
   
    useEffect(() => {
    dispatch(fetchUsers());
  }, [dispatch])

  return(
    <div>
      <h1>All Users</h1>

      {loading && <p>Loading...</p>}
      {error && <p style={{ color: 'red' }}>Error: {error}</p>}

      {users.length > 0 && (
        <ul>
          {users.map((user) => (
            <li key={user.id}>
              <strong>{user.name}</strong> - {user.email}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default UsersList

/* ---------------------- store   -------------------*/

import { applyMiddleware, createStore,compose } from 'redux'
import rootReducer from './roote';
import { thunk } from 'redux-thunk';
import testMiddleware from './middleware/testMiddleware';

const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;

const store = createStore(
    rootReducer,
    composeEnhancers(applyMiddleware(thunk,testMiddleware)));

export default store


/* ----------------------  rootReducer  -------------------*/

import { combineReducers } from "redux";
import appReducer from "./counter";
import { userReducer } from "./userReducer";
import usersReducer from "./usersReducer";


const rootReducer=combineReducers({
    counter:appReducer,
    user:userReducer,
    users:usersReducer,
})
export default rootReducer

/* ----------------------  thunk using Action creator asynchfunction  -------------------*/


export const fetchUsers = () => {
  return async (dispatch) => {
    dispatch({ type: 'FETCH_USERS_REQUEST' }); 
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      const data = await response.json();
      dispatch({ type: 'FETCH_USERS_SUCCESS', payload: data });
    } catch (error) {
      dispatch({ type: 'FETCH_USERS_FAILURE', payload: error.message }); 
    }
  };
};



/* ---------------------- usersReducers    -------------------*/

const initialState = {
  loading: false,
  users: [],
  error: '',
};

const usersReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'FETCH_USERS_REQUEST':
      return { ...state, loading: true, error: '' };
    case 'FETCH_USERS_SUCCESS':
      return { loading: false, users: action.payload, error: '' };
    case 'FETCH_USERS_FAILURE':
      return { loading: false, users: [], error: action.payload };
    default:
      return state;
  }
};

export default usersReducer;
