import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import { Provider } from 'react-redux'
import { store } from './redux/store.js'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <Provider store={store}>
    <App />
    </Provider>
  </StrictMode>,
)


/*----------------       app.jsx        --------------*/
import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { add, edit, remove } from './redux/todo';
import './App.css';

function App() {
  const dispatch = useDispatch();
  const [text, setText] = useState('');
  const todolist = useSelector((state) => state.todos.text); // Access text array directly

  const handleEdit = (todo) => {
    const updated = prompt('Edit task', todo.text);
    if (updated?.trim()) {
      dispatch(edit({ id: todo.id, text: updated }));
    }
  };

  const handleAdd = () => {
    if (text.trim()) {
      dispatch(add({ id: Date.now(), text }));
      setText('');
    }
  };

  return (
    <div className="app-container">
      <h1>Todo List</h1>

      <div className="input-section">
        <input type="text" placeholder="Enter task" value={text} onChange={(e) => setText(e.target.value)}/>
        <button onClick={handleAdd}>Add</button>
      </div>

      <ul className="todo-list">
        {todolist.length > 0 ? (
          todolist.map((todo) => (
            <li key={todo.id}>
                    {todo.text}
              <button onClick={() => handleEdit(todo)}>Edit</button>
              <button onClick={() => dispatch(remove(todo.id))}>Remove</button>
            </li>
          ))
        ) : (
          <p>No tasks found.</p>
        )}
      </ul>
    </div>
  );
}

export default App;

/*----------------            store.js   --------------*/

/*
import {createStore} from 'redux'

export const store=createStore(todoreduser)
*/

import { configureStore } from "@reduxjs/toolkit";
import todoReducer from './todo'

export const store=configureStore({
    reducer:{
        todos:todoReducer,
    }
})
/*----------------      todo.js         --------------*/
/*
const todoreduser=(state={text:[]},action)=>{
    switch(action.type){
        case "add":
            return{...state,text:[...state.text,action.payload]}
        case 'edit':
            return{
                ...state,
                text:state.text.map((item)=>
                    item.id === action.payload.id ? action.payload :item)
            }
        case 'remove':
            return{...state,text:state.text.filter((item)=>item.id !== action.payload)}
        defult:
        return state
    }

}

*/


import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  text: [],
};

const todoReducer = createSlice({
  name: 'todo',
  initialState,
  reducers: {
    add: (state, action) => {
      state.text.push(action.payload);
    },
    edit: (state, action) => {
      state.text = state.text.map((item) =>
        item.id === action.payload.id ? { ...item, text: action.payload.text } : item
      );
    },
    remove: (state, action) => {
      state.text = state.text.filter((item) => item.id !== action.payload);
    },
  },
});

export const { add, edit, remove } = todoReducer.actions;
export default todoReducer.reducer;
